// Minimal SockJS implementation for local usage
(function(global) {
    'use strict';
    
    function SockJS(url, protocols, options) {
        // Fallback to WebSocket when SockJS is not available
        console.warn('Using fallback WebSocket implementation instead of SockJS');
        
        // Convert SockJS URL to WebSocket URL
        const wsUrl = url.replace(/^http/, 'ws');
        
        try {
            this._ws = new WebSocket(wsUrl);
            this._setupEventHandlers();
        } catch (error) {
            console.error('WebSocket connection failed:', error);
            throw error;
        }
    }
    
    SockJS.prototype._setupEventHandlers = function() {
        const self = this;
        
        this._ws.onopen = function(event) {
            console.log('WebSocket connected');
            if (self.onopen) self.onopen(event);
        };
        
        this._ws.onmessage = function(event) {
            if (self.onmessage) self.onmessage(event);
        };
        
        this._ws.onclose = function(event) {
            console.log('WebSocket closed');
            if (self.onclose) self.onclose(event);
        };
        
        this._ws.onerror = function(event) {
            console.error('WebSocket error:', event);
            if (self.onerror) self.onerror(event);
        };
    };
    
    SockJS.prototype.send = function(data) {
        if (this._ws && this._ws.readyState === WebSocket.OPEN) {
            this._ws.send(data);
        } else {
            console.warn('WebSocket not ready for sending data');
        }
    };
    
    SockJS.prototype.close = function() {
        if (this._ws) {
            this._ws.close();
        }
    };
    
    // Event handlers (to be set by user)
    SockJS.prototype.onopen = null;
    SockJS.prototype.onmessage = null;
    SockJS.prototype.onclose = null;
    SockJS.prototype.onerror = null;
    
    // Expose SockJS globally
    global.SockJS = SockJS;
    
})(typeof window !== 'undefined' ? window : global);