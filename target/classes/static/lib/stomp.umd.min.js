// Minimal STOMP implementation for local usage
(function(global) {
    'use strict';
    
    var Stomp = {};
    
    function Client(socket) {
        this.socket = socket;
        this.connected = false;
        this.subscriptions = {};
        this.counter = 0;
        this.debug = function() {}; // Default no-op debug function
    }
    
    Client.prototype.connect = function(headers, connectCallback, errorCallback) {
        var self = this;
        
        this.socket.onopen = function() {
            console.log('STOMP WebSocket connection opened');
            self.connected = true;
            if (connectCallback) connectCallback();
        };
        
        this.socket.onclose = function(event) {
            console.log('STOMP WebSocket connection closed');
            self.connected = false;
            if (errorCallback) errorCallback(event);
        };
        
        this.socket.onerror = function(error) {
            console.error('STOMP WebSocket error:', error);
            self.connected = false;
            if (errorCallback) errorCallback(error);
        };
        
        this.socket.onmessage = function(event) {
            self._handleMessage(event.data);
        };
    };
    
    Client.prototype.disconnect = function(disconnectCallback) {
        this.connected = false;
        if (this.socket) {
            this.socket.close();
        }
        if (disconnectCallback) disconnectCallback();
    };
    
    Client.prototype.subscribe = function(destination, callback, headers) {
        var id = 'sub-' + this.counter++;
        this.subscriptions[id] = {
            destination: destination,
            callback: callback,
            id: id
        };
        
        console.log('STOMP subscribed to:', destination);
        
        // Return subscription object
        return {
            id: id,
            unsubscribe: function() {
                delete this.subscriptions[id];
                console.log('STOMP unsubscribed from:', destination);
            }.bind(this)
        };
    };
    
    Client.prototype.send = function(destination, headers, body) {
        if (!this.connected) {
            console.warn('STOMP not connected, cannot send message');
            return;
        }
        
        // For this minimal implementation, we'll send via HTTP API
        // since we don't have full STOMP protocol implementation
        console.log('STOMP send to:', destination, body);
        
        // Parse the body as JSON and send via fetch
        try {
            var data = JSON.parse(body);
            fetch('/api' + destination.replace('/app', ''), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: body
            }).catch(function(error) {
                console.error('STOMP send error:', error);
            });
        } catch (error) {
            console.error('STOMP send parse error:', error);
        }
    };
    
    Client.prototype._handleMessage = function(data) {
        // Simple message handling - in real STOMP this would parse frames
        try {
            var message = JSON.parse(data);
            
            // Find matching subscription
            for (var id in this.subscriptions) {
                var sub = this.subscriptions[id];
                // Simple destination matching
                if (message.destination && message.destination.includes(sub.destination)) {
                    sub.callback({
                        body: data,
                        headers: {}
                    });
                }
            }
        } catch (error) {
            console.error('STOMP message parse error:', error);
        }
    };
    
    // Static method to create client over SockJS
    Stomp.over = function(socket) {
        return new Client(socket);
    };
    
    // Expose Stomp globally
    global.Stomp = Stomp;
    
})(typeof window !== 'undefined' ? window : global);